pipeline{
    agent any
    // declaring the environment block
    environment{
         name='sudhansu'
         age=28
         isEmployed=true
    }
    // Declaring the parameters
    parameters{
        booleanParam(name:"deploymentReady",defaultValue:false,description:"Are we ready to deploy ?")
        choice(name:"environment",choices:['dev','test','production'],description:"Please choose which environment to deploy ?")
        string(name:"author",defaultValue:'admin',description:"Please provide your name?")
    }

    stages{
        stage("Deployment-config"){
            steps{
            script{
                if(params.deploymentReady){
                        echo """Deployment process initiated \n
            we are ready to deploy :${params.deploymentReady} \n
            we are ready to deploy into Environment:${params.environment} \n
            we are ready to deploy into Author:${params.author}
            """
            }
            else{
                echo """We are not ready yet ! \n hence we are skipping this deployment."""
            }
                }
            }
        }
        stage("Stage-Test groovy_variables")
        {
        
            steps{
                echo """
                Jenkins pipeline created by the author :${env.name.toString()} \n
                Age:${env.age.toInteger()} \n 
                he is already employed:${env.isEmployed.toBoolean()} \n           
                """
                script{
                       def list=["Bangalore","Delhi","Bhubaneswar"]  //Declaring the list variable type
                       def map=[env_name:'prod']   // Declaring the map variable type
                        for (location in list){
                            echo "${env.name} is open to work in ${location}"
                        }
                echo "We are ready to deploy in ${map['env_name']}"  // Calling the map type variable
                echo "print the Datatype of name ${env.name.getClass()}"   // getting the data type of name variable
                }
            }
        }
        stage("For loop trial stage")
        {
            steps
            {
                script
                {
                    for(int i=0;i<10;i++)
                    {
               
                        // Adding a continue statement at 6
                        if (i.toInteger()==6)
                        {
                            continue
                        }
                        else if (i.toInteger()==8)
                        {
                            break
                        }
                   
                            echo "Iteration ${i}."
                    
                        }
                    }
                }
            }
            stage("Stage- Switch case")
            {
                steps{
                   script{
                     switch(params.environment) {
                        case 'dev':
                            echo "${params.environment}- Build deployed."
                            break
                        case 'test':
                            echo "${params.environment}- Build deployed."
                            break
                        case 'production':
                            echo "${params.environment}- Build deployed."
                            break
                        default:
                            echo "It's a unknown environment."
                   }
                }
            }
        }
        stage("Stage-While loop")
        {
            steps{
                script{
                    def count=0
                    while(count<3){
                        echo "Iteration ${count} occured."
                        count++
                    }
                }
            }
        }
        stage('Jenkins Build in Functions')
        {
          steps
          {
            script
            {
                echo "Exploring the Jenkins Build-In-Function."
                // Change the built in result
                if (2==3){
                    currentBuild.result="SUCCESS"
                    echo "Current build result is :${currentBuild.result}"
                    return
                }
                else{
                    currentBuild.result='UNSTABLE'
                    echo "Current build result is :${currentBuild.result}"
                    return
                }
            }
          }

        }
        stage("Stage-Function steps")
        {
            steps{
                script{
                    def genericDeployment(String deployedEnvironment)
                    {
                        echo "Deployed to ${deployedEnvironment} ..."
                    }
                    def envs=['test','demo','prod']
                    for (env in envs) {
                        genericDeployment(env)
                    }
                }
            }
        }
    }
}