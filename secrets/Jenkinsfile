pipeline{
    agent any
    environment{
        def secret_api=credentials('api-key')
    }
    stages{
        stage("Secret-keys")
        {
            steps
            {
                echo "API key for the app-access is :${env.secret_api}"  // Groovy
                // logging with bat command
                script
                {
                    if(!isUnix()){
                    bat """
                echo the secret key is with bat :%secret_api%   
                """
                }
                else{
                    // Logging with sh
                sh """
                echo 'secret key with sh:$secret_api'
                """
                }
                }
                
            }
        }
        stage('Username&pwd')
        {
            steps
            {
                withCredentials([usernamePassword(
                    credentialsId:'sudhansu_personal',
                    usernameVariable:'USER',
                    passwordVariable:'PASS'
                )])
                {
                    sh "echo 'username is :$USER'"
                    sh "echo 'username is :$PASS'"

                }
            }
        }
        stage('Clone Automation Repo-SSH Auth')
        {
            steps
            {
                //sshagent wrap the private key uses
                sshagent(['jenkins-github-key'])
                {
                    sh 'git clone --branch master https://github.com/sudhansu4107/simple-java-maven-app.git'
                    echo "Git repo clones successfully."
                }
            }
        }
        stage('SCM-Checkout')
        {
            steps
            {
                checkout([$class:'GitSCM',
                branches:[[name:'*/master']],
                userRemoteConfigs[[
                    url:'git@github.com:sudhansu4107/simple-java-maven-app.git',
                    credentialsId:'jenkins-github-key'
                ]],
                extensions:[[$class:'CloneOption', shallow: true, depth: 1]]]
                )
            }
        }
    }
}